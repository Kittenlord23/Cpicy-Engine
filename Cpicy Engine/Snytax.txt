%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
file_extensions:
  - source
scope: source.example-c
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.example-c
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: '#'
      scope: punctuation.definition.comment.example-c
      push: line_comment
    - match: '/t([\s\S]*)$/'
      scope: punctuation.definition.comment.example-c

    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(new|static|field|On Event|On Loop|if|for|while|do|import)\b'
      scope: keyword.control.example-c

    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.example-c
    - match: '\b(assign|fetch|data)'
      scope: constant.numeric.example-c
    - match: '\b()\b'
      scope: meta.function entity.name.function
    - match: '\b(begin function|begin class|begin method|end function|end class|end method|begin fields|end fields)\b'
      scope: storage.type
    - match: '\b(Do|Then)\b'
      scope: meta.function entity.name.argument
  double_quoted_string:
    - meta_scope: string.quoted.double.example-c
    - match: '\\.'
      scope: constant.character.escape.example-c
    - match: '"'
      scope: punctuation.definition.string.end.example-c
      pop: true

  line_comment:
    - meta_scope: comment.line.example-c
    - match: $
      pop: true
